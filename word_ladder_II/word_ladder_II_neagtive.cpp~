#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<climits>
#include<fstream>
using namespace std;

class Solution {
public:
    void Swap(char& a, char &b)
    {
        if(&a == &b)
        {
            return;
        }
        a = a ^ b;
        b = a ^ b;
        a = a ^ b;
    }
    void CollectResult(string word, map<string, string> &father, vector<vector<string> > &result)
    {
        vector<string> tmp;
        while(father[word].compare("") != 0) 
        {
            tmp.insert(tmp.begin(), word);
            word = father[word];
        }
        tmp.insert(tmp.begin(), word);
        result.push_back(tmp);
    }
    void BFS(string &start, string &end, set<string> &dict,vector<vector<string> > &result)
    {
        queue<string> words_queue; 
        words_queue.push(start);
        set<string> visited;
        visited.insert(start);
        map<string, string> father;
        map<string, int> word_level;
        father[start] = "";
        word_level[start] = 0;
        int found_level = INT_MAX;
        while(!words_queue.empty())
        {
            string cur_word = words_queue.front();
            if(word_level[cur_word] > found_level)
            {
                break;
            }
            words_queue.pop();
            int word_len = cur_word.length();
            string tmp_word = cur_word;
            for(int i = 0; i < word_len; i++)
            {
                for(char cur_char = 'a'; cur_char <= 'z'; cur_char++)
                {
                    if(cur_char == tmp_word[i])
                    {
                        continue;
                    }
                    else
                    {
                        Swap(cur_char, tmp_word[i]);
                        if(tmp_word.compare(end) == 0)
                        {
                            father[end] = cur_word;
                            CollectResult(end, father, result);
                            found_level = word_level[cur_word];
                        }
                        else if(dict.count(tmp_word) > 0 && visited.count(tmp_word) == 0)
                        {
                            father[tmp_word] = cur_word;
                            word_level[tmp_word] = word_level[cur_word]+1;
                            words_queue.push(tmp_word);
                            visited.insert(tmp_word);
                        }
                        Swap(cur_char, tmp_word[i]);
                    }
                }
            }
        }
        cout << word_level["rex"] << endl;
    }
    vector<vector<string> > findLadders(string start, string end, set<string> &dict) {
        vector<vector<string> > result;
        BFS(start, end, dict, result);
        return result;
    }
};

void Test()
{
   string start = "hot";
   string end = "dog";
   set<string> dict;
   dict.insert("hot");
   dict.insert("dog");
   dict.insert("dot");
   Solution s;
   s.findLadders(start, end, dict);
}

void Test1()
{
    string start;
    string end; 
    set<string> dict;
    ifstream fin("file.in");
    fin >> start;
    fin >> end;
    string tmp;
    while(fin >> tmp)
    {
        dict.insert(tmp);
    }
    Solution s;
    s.findLadders(start, end, dict);
}

int main()
{
    Test1();
    return 0;
}
